g2_df <- g2_df[,-which(names(g2_df) == group)]
g1_cor <- cor_fmt_1g(g1_df, mult_comp = T)
g2_cor <- cor_fmt_1g(g2_df, mult_comp = T)
g1_cor$key <- apply(g1_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g1_cor <- dplyr::group_by(dplyr::arrange(g1_cor, measure1, measure2), key)
g1_cor <- dplyr::filter(g1_cor, dplyr::row_number() == 1)
g2_cor$key <- apply(g2_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g2_cor <- dplyr::group_by(dplyr::arrange(g2_cor, measure1, measure2), key)
g2_cor <- dplyr::filter(g2_cor, dplyr::row_number() == dplyr::n(), measure1 != measure2)
out <- dplyr::full_join(g1_cor, g2_cor)
return(out)
}
cor_fmt_2g(mtcars, "spearman", "am")
#'
#' @param df A data frame or tibble containing only the columns you want to calculate the correlations of, and a group identifier column.
#' @param group A string containing the name of a column which identifies the two groups you want correlations computed.
#'
#' @importFrom dplyr arrange n filter rowwise row_number
#' @return  a tidy tibble ready for plotting
#' @export
#'
#' @examples format_cor_2groups(mtcars, "am")
#'
cor_fmt_2g <- function(df, cor_method, group){
stopifnot(length(levels(factor(df[[group]]))) == 2)
g1 <- levels(factor(df[[group]]))[[1]]
g2 <- levels(factor(df[[group]]))[[2]]
g1_df <- df[df[[group]] == g1,]
g1_df <- g1_df[,-which(names(g1_df) == group)]
g2_df <- df[df[[group]] == g2,]
g2_df <- g2_df[,-which(names(g2_df) == group)]
g1_cor <- cor_fmt_1g(g1_df)
g2_cor <- cor_fmt_1g(g2_df)
g1_cor$key <- apply(g1_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g1_cor <- dplyr::group_by(dplyr::arrange(g1_cor, measure1, measure2), key)
g1_cor <- dplyr::filter(g1_cor, dplyr::row_number() == 1)
g2_cor$key <- apply(g2_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g2_cor <- dplyr::group_by(dplyr::arrange(g2_cor, measure1, measure2), key)
g2_cor <- dplyr::filter(g2_cor, dplyr::row_number() == dplyr::n(), measure1 != measure2)
out <- dplyr::full_join(g1_cor, g2_cor)
return(out)
}
cor_fmt_2g(mtcars, "spearman", "am")
#' importFrom("stats", "p.adjust")
cor_fmt <- function(df,
cor_method = c("spearman"),
col_list = NULL,
mc_method = NULL,
group = NULL) {
if (is.null(group) == T){
temp <- cor_fmt_1g(df, cor_method = cor_method)
}
else {
if(length(levels(factor(group))) != 2) stop('`sixpack` only supports two groups at this time.')
temp <- cor_fmt_2g(df, cor_method = cor_method, group = group)
}
if (is.null(mc_method) == F){
temp$p <- p.adjust(temp$p, method = mc_method)
}
temp$sig_p <- ifelse(temp$p < .05, T, F)
temp$p_if_sig = ifelse(temp$p < .05, temp$p, NA)
temp$r_if_sig = ifelse(temp$p < .05, temp$r, NA)
out <- temp
return(out)
}
cor_fmt(mtcars, group="am")
#' importFrom("stats", "p.adjust")
cor_fmt <- function(df,
cor_method = c("spearman"),
col_list = NULL,
mc_method = NULL,
group = NULL) {
if (is.null(group) == T){
temp <- cor_fmt_1g(df, cor_method = cor_method)
}
else {
if(length(levels(factor(df[[group]]))) != 2) stop('`sixpack` only supports two groups at this time.')
temp <- cor_fmt_2g(df, cor_method = cor_method, group = group)
}
if (is.null(mc_method) == F){
temp$p <- p.adjust(temp$p, method = mc_method)
}
temp$sig_p <- ifelse(temp$p < .05, T, F)
temp$p_if_sig = ifelse(temp$p < .05, temp$p, NA)
temp$r_if_sig = ifelse(temp$p < .05, temp$r, NA)
out <- temp
return(out)
}
cor_fmt(mtcars, group="am")
devtools::load_all()
#'
#' @param df A data frame or tibble containing only the columns you want to calculate the correlations of, and a group identifier column.
#' @param group A string containing the name of a column which identifies the two groups you want correlations computed.
#'
#' @importFrom dplyr arrange n filter rowwise row_number
#' @return  a tidy tibble ready for plotting
#' @export
#'
#' @examples format_cor_2groups(mtcars, "am")
#'
cor_fmt_2g <- function(df, cor_method, group){
stopifnot(length(levels(factor(df[[group]]))) == 2)
g1 <- levels(factor(df[[group]]))[[1]]
g2 <- levels(factor(df[[group]]))[[2]]
g1_df <- df[df[[group]] == g1,]
g1_df <- g1_df[,-which(names(g1_df) == group)]
g2_df <- df[df[[group]] == g2,]
g2_df <- g2_df[,-which(names(g2_df) == group)]
g1_cor <- cor_fmt_1g(g1_df)
g2_cor <- cor_fmt_1g(g2_df)
g1_cor$key <- apply(g1_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g1_cor <- dplyr::group_by(dplyr::arrange(g1_cor, measure1, measure2), key)
g1_cor <- dplyr::filter(g1_cor, dplyr::row_number() == 1)
g2_cor$key <- apply(g2_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g2_cor <- dplyr::group_by(dplyr::arrange(g2_cor, measure1, measure2), key)
g2_cor <- dplyr::filter(g2_cor, dplyr::row_number() == dplyr::n(), measure1 != measure2)
out <- dplyr::full_join(g1_cor, g2_cor)
return(out)
}
cor_fmt_2g(mtcars, "spearman", "am")
#'
#' @param df A data frame or tibble containing only the columns you want to calculate the correlations of, and a group identifier column.
#' @param group A string containing the name of a column which identifies the two groups you want correlations computed.
#'
#' @importFrom dplyr arrange n filter rowwise row_number
#' @return  a tidy tibble ready for plotting
#' @export
#'
#' @examples format_cor_2groups(mtcars, "am")
#'
cor_fmt_2g <- function(df, cor_method, group){
stopifnot(length(levels(factor(df[[group]]))) == 2)
g1 <- levels(factor(df[[group]]))[[1]]
g2 <- levels(factor(df[[group]]))[[2]]
g1_df <- df[df[[group]] == g1,]
g1_df <- g1_df[,-which(names(g1_df) == group)]
g2_df <- df[df[[group]] == g2,]
g2_df <- g2_df[,-which(names(g2_df) == group)]
g1_cor <- cor_fmt_1g(g1_df, cor_method = cor_method)
g2_cor <- cor_fmt_1g(g2_df, cor_method = cor_method)
g1_cor$key <- apply(g1_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g1_cor <- dplyr::group_by(dplyr::arrange(g1_cor, measure1, measure2), key)
g1_cor <- dplyr::filter(g1_cor, dplyr::row_number() == 1)
g2_cor$key <- apply(g2_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g2_cor <- dplyr::group_by(dplyr::arrange(g2_cor, measure1, measure2), key)
g2_cor <- dplyr::filter(g2_cor, dplyr::row_number() == dplyr::n(), measure1 != measure2)
out <- dplyr::full_join(g1_cor, g2_cor)
return(out)
}
cor_fmt_2g(mtcars, "spearman", "am")
cor_fmt_1g <- function(df,
cor_method){
temp <- cors(df, cor_method = cor_method)
temp <- purrr::map(temp, ~tibble::rownames_to_column(.x, var="measure1"))
temp <- purrr::map_dfr(temp, ~tidyr::pivot_longer(.x, -measure1, "measure2"), .id="id")
temp <- tidyr::pivot_wider(temp, names_from = id, values_from = value)
temp$p <- temp$P; temp$P <- NULL
out <- temp
return(out)
}
cor_fmt_1g(mtcars, "spearman")
cor_fmt_2g(mtcars, "spearman", "am")
#'
#' @param df A data frame or tibble containing only the columns you want to calculate the correlations of, and a group identifier column.
#' @param group A string containing the name of a column which identifies the two groups you want correlations computed.
#'
#' @importFrom dplyr arrange n filter rowwise row_number
#' @return  a tidy tibble ready for plotting
#' @export
#'
#' @examples format_cor_2groups(mtcars, "am")
#'
cor_fmt_2g <- function(df, cor_method, group){
stopifnot(length(levels(factor(df[[group]]))) == 2)
g1 <- levels(factor(df[[group]]))[[1]]
g2 <- levels(factor(df[[group]]))[[2]]
g1_df <- df[df[[group]] == g1,]
g1_df <- g1_df[,-which(names(g1_df) == group)]
g2_df <- df[df[[group]] == g2,]
g2_df <- g2_df[,-which(names(g2_df) == group)]
browser()
g1_cor <- cor_fmt_1g(g1_df, cor_method = cor_method)
g2_cor <- cor_fmt_1g(g2_df, cor_method = cor_method)
g1_cor$key <- apply(g1_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g1_cor <- dplyr::group_by(dplyr::arrange(g1_cor, measure1, measure2), key)
g1_cor <- dplyr::filter(g1_cor, dplyr::row_number() == 1)
g2_cor$key <- apply(g2_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g2_cor <- dplyr::group_by(dplyr::arrange(g2_cor, measure1, measure2), key)
g2_cor <- dplyr::filter(g2_cor, dplyr::row_number() == dplyr::n(), measure1 != measure2)
out <- dplyr::full_join(g1_cor, g2_cor)
return(out)
}
cor_fmt_2g(mtcars, "spearman", "am")
g1_cor <- cor_fmt_1g(g1_df, cor_method = cor_method)
g2_cor <- cor_fmt_1g(g2_df, cor_method = cor_method)
g1_cor$key <- apply(g1_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g1_cor <- dplyr::group_by(dplyr::arrange(g1_cor, measure1, measure2), key)
g1_cor <- dplyr::filter(g1_cor, dplyr::row_number() == 1)
g2_cor$key <- apply(g2_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g2_cor <- dplyr::group_by(dplyr::arrange(g2_cor, measure1, measure2), key)
g2_cor <- dplyr::filter(g2_cor, dplyr::row_number() == dplyr::n(), measure1 != measure2)
out <- dplyr::full_join(g1_cor, g2_cor)
out
cor_fmt_2g(mtcars, cor_method = "spearman", group = "am")
g1_cor <- cor_fmt_1g(g1_df, cor_method = cor_method)
stopifnot(length(levels(factor(df[[group]]))) == 2)
g1 <- levels(factor(df[[group]]))[[1]]
g2 <- levels(factor(df[[group]]))[[2]]
g1_df <- df[df[[group]] == g1,]
g1_df <- g1_df[,-which(names(g1_df) == group)]
g2_df <- df[df[[group]] == g2,]
g2_df <- g2_df[,-which(names(g2_df) == group)]
browser()
g1_cor <- cor_fmt_1g(g1_df, cor_method = cor_method)
g2_cor <- cor_fmt_1g(g2_df, cor_method = cor_method)
g1_cor$key <- apply(g1_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g1_cor <- dplyr::group_by(dplyr::arrange(g1_cor, measure1, measure2), key)
g1_cor <- dplyr::filter(g1_cor, dplyr::row_number() == 1)
g1_cor
g1_cor <- dplyr::group_by(dplyr::arrange(g1_cor, measure1, measure2), key)
g1_cor <- dplyr::filter(g1_cor, dplyr::row_number() == 1)
g2_cor$key <- apply(g2_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g2_cor <- dplyr::group_by(dplyr::arrange(g2_cor, measure1, measure2), key)
g2_cor <- dplyr::filter(g2_cor, dplyr::row_number() == dplyr::n(), measure1 != measure2)
out <- dplyr::full_join(g1_cor, g2_cor)
out
cor_fmt_2g(mtcars, "spearman", "am")
#'
#' @param df A data frame or tibble containing only the columns you want to calculate the correlations of, and a group identifier column.
#' @param group A string containing the name of a column which identifies the two groups you want correlations computed.
#'
#' @importFrom dplyr arrange n filter rowwise row_number
#' @return  a tidy tibble ready for plotting
#' @export
#'
#' @examples format_cor_2groups(mtcars, "am")
#'
cor_fmt_2g <- function(df, cor_method, group){
stopifnot(length(levels(factor(df[[group]]))) == 2)
g1 <- levels(factor(df[[group]]))[[1]]
g2 <- levels(factor(df[[group]]))[[2]]
g1_df <- df[df[[group]] == g1,]
g1_df <- g1_df[,-which(names(g1_df) == group)]
g2_df <- df[df[[group]] == g2,]
g2_df <- g2_df[,-which(names(g2_df) == group)]
g1_cor <- cor_fmt_1g(g1_df, cor_method = cor_method)
g2_cor <- cor_fmt_1g(g2_df, cor_method = cor_method)
g1_cor$key <- apply(g1_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g1_cor <- dplyr::group_by(dplyr::arrange(g1_cor, measure1, measure2), key)
g1_cor <- dplyr::filter(g1_cor, dplyr::row_number() == 1)
g2_cor$key <- apply(g2_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g2_cor <- dplyr::group_by(dplyr::arrange(g2_cor, measure1, measure2), key)
g2_cor <- dplyr::filter(g2_cor, dplyr::row_number() == dplyr::n(), measure1 != measure2)
out <- dplyr::full_join(g1_cor, g2_cor)
return(out)
}
#'
#' @param df A data frame or tibble containing only the columns you want to calculate the correlations of, and a group identifier column.
#' @param group A string containing the name of a column which identifies the two groups you want correlations computed.
#'
#' @importFrom dplyr arrange n filter rowwise row_number
#' @return  a tidy tibble ready for plotting
#' @export
#'
#' @examples format_cor_2groups(mtcars, "am")
#'
cor_fmt_2g <- function(df, cor_method, group){
stopifnot(length(levels(factor(df[[group]]))) == 2)
g1 <- levels(factor(df[[group]]))[[1]]
g2 <- levels(factor(df[[group]]))[[2]]
g1_df <- df[df[[group]] == g1,]
g1_df <- g1_df[,-which(names(g1_df) == group)]
g2_df <- df[df[[group]] == g2,]
g2_df <- g2_df[,-which(names(g2_df) == group)]
g1_cor <- cor_fmt_1g(g1_df, cor_method = cor_method)
g2_cor <- cor_fmt_1g(g2_df, cor_method = cor_method)
g1_cor$key <- apply(g1_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g1_cor <- dplyr::group_by(dplyr::arrange(g1_cor, measure1, measure2), key)
g1_cor <- dplyr::filter(g1_cor, dplyr::row_number() == 1)
g2_cor$key <- apply(g2_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g2_cor <- dplyr::group_by(dplyr::arrange(g2_cor, measure1, measure2), key)
g2_cor <- dplyr::filter(g2_cor, dplyr::row_number() == dplyr::n(), measure1 != measure2)
out <- dplyr::full_join(g1_cor, g2_cor)
return(out)
}
#'
#' @param df A data frame or tibble containing only the columns you want to calculate the correlations of, and a group identifier column.
#' @param group A string containing the name of a column which identifies the two groups you want correlations computed.
#'
#' @importFrom dplyr arrange n filter rowwise row_number
#' @return  a tidy tibble ready for plotting
#' @export
#'
#' @examples format_cor_2groups(mtcars, "am")
#'
cor_fmt_2g <- function(df, cor_method, group){
stopifnot(length(levels(factor(df[[group]]))) == 2)
g1 <- levels(factor(df[[group]]))[[1]]
g2 <- levels(factor(df[[group]]))[[2]]
g1_df <- df[df[[group]] == g1,]
g1_df <- g1_df[,-which(names(g1_df) == group)]
g2_df <- df[df[[group]] == g2,]
g2_df <- g2_df[,-which(names(g2_df) == group)]
g1_cor <- cor_fmt_1g(g1_df, cor_method = cor_method)
g2_cor <- cor_fmt_1g(g2_df, cor_method = cor_method)
g1_cor$key <- apply(g1_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g1_cor <- dplyr::group_by(dplyr::arrange(g1_cor, measure1, measure2), key)
g1_cor <- dplyr::filter(g1_cor, dplyr::row_number() == 1)
g2_cor$key <- apply(g2_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g2_cor <- dplyr::group_by(dplyr::arrange(g2_cor, measure1, measure2), key)
g2_cor <- dplyr::filter(g2_cor, dplyr::row_number() == dplyr::n(), measure1 != measure2)
out <- dplyr::full_join(g1_cor, g2_cor)
return(out)
}
#'
#' @param df A data frame or tibble containing only the columns you want to calculate the correlations of, and a group identifier column.
#' @param group A string containing the name of a column which identifies the two groups you want correlations computed.
#'
#' @importFrom dplyr arrange n filter rowwise row_number
#' @return  a tidy tibble ready for plotting
#' @export
#'
#' @examples format_cor_2groups(mtcars, "am")
#'
cor_fmt_2g <- function(df, cor_method, group){
stopifnot(length(levels(factor(df[[group]]))) == 2)
g1 <- levels(factor(df[[group]]))[[1]]
g2 <- levels(factor(df[[group]]))[[2]]
g1_df <- df[df[[group]] == g1,]
g1_df <- g1_df[,-which(names(g1_df) == group)]
g2_df <- df[df[[group]] == g2,]
g2_df <- g2_df[,-which(names(g2_df) == group)]
g1_cor <- cor_fmt_1g(g1_df, cor_method = cor_method)
g2_cor <- cor_fmt_1g(g2_df, cor_method = cor_method)
g1_cor$key <- apply(g1_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g1_cor <- dplyr::group_by(dplyr::arrange(g1_cor, measure1, measure2), key)
g1_cor <- dplyr::filter(g1_cor, dplyr::row_number() == 1)
g2_cor$key <- apply(g2_cor[ ,c("measure1","measure2")], 1, paste, collapse = "-")
g2_cor <- dplyr::group_by(dplyr::arrange(g2_cor, measure1, measure2), key)
g2_cor <- dplyr::filter(g2_cor, dplyr::row_number() == dplyr::n(), measure1 != measure2)
out <- dplyr::full_join(g1_cor, g2_cor)
return(out)
}
cor_fmt_2g(mtcars, "spearman", "am")
plot_cor_2groups(mtcars, "am")
#' @param df  A data frame or tibble containing only the columns you want to calculate the correlations of, and a group identifier column.
#'
#' @param group A string containing the name of a column which identifies the two groups you want correlations computed.
#'
#' @importFrom ggplot2 ggplot aes geom_point geom_tile theme_classic coord_flip coord_equal labs guides scale_x_discrete scale_y_discrete scale_size  scale_alpha_discrete theme element_text
#' @return  ggplot object
#' @export
#'
#' @examples plot_cor_2groups(mtcars, "am")
plot_cor_2groups <- function(df, group){
plot_df <-  cor_fmt_2g(df, group)
g1 <- levels(factor(df[[group]]))[[1]]
g2 <- levels(factor(df[[group]]))[[2]]
ggplot(plot_df, aes(measure1,measure2, col=r_if_sig, alpha=sig_p)) + ## to get the rect filled
geom_tile(col="black", fill="white") +
geom_point(aes(size = abs(r)), shape=16) +
labs(x=g1,y=g2,col = "Spearman's\nCorrelation") +
theme_classic()+
coord_equal() +
guides(alpha=F) +
viridis::scale_color_viridis(limits=c(-1,1), na.value="gray70")+
scale_x_discrete(expand=c(0,0)) +
scale_y_discrete(expand=c(0,0)) +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
scale_size(range=c(1,6), guide=NULL) +
scale_alpha_discrete(0,1)
}
plot_cor_2groups(mtcars, "am")
#' @param df  A data frame or tibble containing only the columns you want to calculate the correlations of, and a group identifier column.
#'
#' @param group A string containing the name of a column which identifies the two groups you want correlations computed.
#'
#' @importFrom ggplot2 ggplot aes geom_point geom_tile theme_classic coord_flip coord_equal labs guides scale_x_discrete scale_y_discrete scale_size  scale_alpha_discrete theme element_text
#' @return  ggplot object
#' @export
#'
#' @examples plot_cor_2groups(mtcars, "am")
plot_cor_2groups <- function(df, cor_method, group){
plot_df <-  cor_fmt_2g(df, cor_method = cor_method, group = group)
g1 <- levels(factor(df[[group]]))[[1]]
g2 <- levels(factor(df[[group]]))[[2]]
ggplot(plot_df, aes(measure1,measure2, col=r_if_sig, alpha=sig_p)) + ## to get the rect filled
geom_tile(col="black", fill="white") +
geom_point(aes(size = abs(r)), shape=16) +
labs(x=g1,y=g2,col = "Spearman's\nCorrelation") +
theme_classic()+
coord_equal() +
guides(alpha=F) +
viridis::scale_color_viridis(limits=c(-1,1), na.value="gray70")+
scale_x_discrete(expand=c(0,0)) +
scale_y_discrete(expand=c(0,0)) +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
scale_size(range=c(1,6), guide=NULL) +
scale_alpha_discrete(0,1)
}
#' @examples plot_cor_2groups(mtcars, "am")
#' @param df  A data frame or tibble containing only the columns you want to calculate the correlations of, and a group identifier column.
#'
#' @param group A string containing the name of a column which identifies the two groups you want correlations computed.
#'
#' @importFrom ggplot2 ggplot aes geom_point geom_tile theme_classic coord_flip coord_equal labs guides scale_x_discrete scale_y_discrete scale_size  scale_alpha_discrete theme element_text
#' @return  ggplot object
#' @export
#'
#' @examples plot_cor_2groups(mtcars, "am")
plot_cor_2groups <- function(df, cor_method, group){
plot_df <-  cor_fmt_2g(df, cor_method = cor_method, group = group)
g1 <- levels(factor(df[[group]]))[[1]]
g2 <- levels(factor(df[[group]]))[[2]]
ggplot(plot_df, aes(measure1,measure2, col=r_if_sig, alpha=sig_p)) + ## to get the rect filled
geom_tile(col="black", fill="white") +
geom_point(aes(size = abs(r)), shape=16) +
labs(x=g1,y=g2,col = "Spearman's\nCorrelation") +
theme_classic()+
coord_equal() +
guides(alpha=F) +
viridis::scale_color_viridis(limits=c(-1,1), na.value="gray70")+
scale_x_discrete(expand=c(0,0)) +
scale_y_discrete(expand=c(0,0)) +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
scale_size(range=c(1,6), guide=NULL) +
scale_alpha_discrete(0,1)
}
plot_cor_2groups(mtcars, "am")
plot_cor_2groups(mtcars,"spearman", "am")
plot_cor_2groups(mtcars,"spearman", "am")
cor_fmt_2g(mtcars, "spearman", "am")
cor_fmt(mtcars, "spearman", group="am")
cor_fmt(mtcars, cor_method = "spearman", group="am")
#' importFrom("stats", "p.adjust")
cor_fmt <- function(df,
cor_method = c("spearman"),
col_list = NULL,
mc_method = NULL,
group = NULL) {
if (is.null(group) == T){
temp <- cor_fmt_1g(df, cor_method = cor_method)
}
else {
if(length(levels(factor(df[[group]]))) != 2) stop('`sixpack` only supports two groups at this time.')
temp <- cor_fmt_2g(df, cor_method = cor_method, group = group)
}
if (is.null(mc_method) == F){
temp$p <- p.adjust(temp$p, method = mc_method)
}
temp$sig_p <- ifelse(temp$p < .05, T, F)
temp$p_if_sig = ifelse(temp$p < .05, temp$p, NA)
temp$r_if_sig = ifelse(temp$p < .05, temp$r, NA)
out <- temp
return(out)
}
#' importFrom("stats", "p.adjust")
cor_fmt <- function(df,
cor_method = c("spearman"),
col_list = NULL,
mc_method = NULL,
group = NULL) {
if (is.null(group) == T){
temp <- cor_fmt_1g(df, cor_method = cor_method)
}
else {
if(length(levels(factor(df[[group]]))) != 2) stop('`sixpack` only supports two groups at this time.')
temp <- cor_fmt_2g(df, cor_method = cor_method, group = group)
}
if (is.null(mc_method) == F){
temp$p <- p.adjust(temp$p, method = mc_method)
}
temp$sig_p <- ifelse(temp$p < .05, T, F)
temp$p_if_sig = ifelse(temp$p < .05, temp$p, NA)
temp$r_if_sig = ifelse(temp$p < .05, temp$r, NA)
out <- temp
return(out)
}
cor_fmt(mtcars, cor_method = "spearman", group="am")
#' @param df  A data frame or tibble containing only the columns you want to calculate the correlations of, and a group identifier column.
#'
#' @param group A string containing the name of a column which identifies the two groups you want correlations computed.
#'
#' @importFrom ggplot2 ggplot aes geom_point geom_tile theme_classic coord_flip coord_equal labs guides scale_x_discrete scale_y_discrete scale_size  scale_alpha_discrete theme element_text
#' @return  ggplot object
#' @export
#'
#' @examples plot_cor_2groups(mtcars, "am")
plot_cor_2groups <- function(df, cor_method, group){
plot_df <-  cor_fmt(df, cor_method = cor_method, group = group)
g1 <- levels(factor(df[[group]]))[[1]]
g2 <- levels(factor(df[[group]]))[[2]]
ggplot(plot_df, aes(measure1,measure2, col=r_if_sig, alpha=sig_p)) + ## to get the rect filled
geom_tile(col="black", fill="white") +
geom_point(aes(size = abs(r)), shape=16) +
labs(x=g1,y=g2,col = "Spearman's\nCorrelation") +
theme_classic()+
coord_equal() +
guides(alpha=F) +
viridis::scale_color_viridis(limits=c(-1,1), na.value="gray70")+
scale_x_discrete(expand=c(0,0)) +
scale_y_discrete(expand=c(0,0)) +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
scale_size(range=c(1,6), guide=NULL) +
scale_alpha_discrete(0,1)
}
plot_cor_2groups(mtcars,"spearman", "am")
Hmisc::rcorr()
?Hmisc::rcorr
devtools::load_all()
devtools::document()
devtools::document()
